name: Security Scans (SAST + DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # For SARIF uploads to GitHub code scanning

jobs:
  security-tests:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      #########################################
      # ‚úÖ SAST: Snyk PHP Scan (dvwa-code only)
      #########################################
      - name: üß™ Run Snyk on dvwa-code (max 20 mins)
        run: |
          cd dvwa-code
          timeout 1200 snyk test --sarif-file-output=../snyk.sarif
          if [ ! -s ../snyk.sarif ]; then
            echo '{ "version": "2.1.0", "runs": [] }' > ../snyk.sarif
          fi
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üßæ Upload Snyk SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      ##################################
      # ‚úÖ DAST: ZAP Baseline Scan
      ##################################
      - name: üï∑Ô∏è Run ZAP Baseline Scan on DVWA
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8080'
          fail_action: false
          docker_name: 'ghcr.io/zaproxy/zap-baseline'

      #####################################
      # (Optional) Upload SARIF as artifact
      #####################################
      - name: üóÇÔ∏è Upload Snyk SARIF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk.sarif
