name: "DVWA Security Testing"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  security-tests:
    runs-on: ubuntu-latest
    services:
      dvwa:
        image: vulnerables/web-dvwa
        ports:
          - 8080:80

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Wait for DVWA to Start
        run: sleep 30

      ##############################################
      #             SONARCLOUD - SAST             #
      ##############################################

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=dubeyshagun29
            -Dsonar.projectKey=Dubeyshagun29_HCL_Demo
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.security.cwe.include=true
            -Dsonar.security.report.cve=true

      - name: Download SonarCloud Report & Extract CVEs
        run: |
          mkdir -p reports
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/issues/search?componentKeys=Dubeyshagun29_HCL_Demo&types=VULNERABILITY" -o sonar_issues.json
          echo '
import json

with open("sonar_issues.json") as f:
    data = json.load(f)

vulns = []
for issue in data.get("issues", []):
    cve_refs = [t for t in issue.get("tags", []) if t.lower().startswith("cve-")]
    if cve_refs:
        vulns.append(f"- {issue['severity']} | {issue['rule']} ({issue['component']}): {', '.join(cve_refs)}")

with open("reports/sonarqube_cve_report.md", "w") as f:
    if vulns:
        f.write("## üö® SonarCloud CVE Report\n\n" + "\n".join(vulns))
    else:
        f.write("No CVEs found.")
' > extract_sast_cve.py
          python3 extract_sast_cve.py

      - name: Create GitHub Issue for SonarCloud CVEs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPORT_BODY=$(cat reports/sonarqube_cve_report.md)
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues \
               -d "{\"title\": \"üîí SonarCloud CVE Report (SAST)\", \"body\": \"$REPORT_BODY\"}"

      ##############################################
      #           STACKHAWK - DAST                #
      ##############################################

      - name: Run HawkScan (StackHawk)
        uses: stackhawk/hawkscan-action@v2
        continue-on-error: false
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}
          githubToken: ${{ github.token }}
          codeScanningAlerts: true
          configurationFiles: ".hawk/stackhawk.yml"

      - name: Wait for StackHawk Report
        run: sleep 240

      - name: Parse StackHawk JSON Report & Create Issue
        run: |
          REPORT_PATH=".hawk/reports/report.json"
          if [ -f "$REPORT_PATH" ]; then
            echo '
import json

with open(".hawk/reports/report.json") as f:
    data = json.load(f)

cves = []
for finding in data.get("findings", []):
    for ref in finding.get("references", []):
        if ref.lower().startswith("cve-"):
            cves.append(f"- {finding['title']} ({finding['severity']}): {ref}")

with open("reports/stackhawk_cve_report.md", "w") as f:
    if cves:
        f.write("## üõ°Ô∏è StackHawk CVE Report\n\n" + "\n".join(cves))
    else:
        f.write("No CVEs found.")
' > extract_dast_cve.py
            python3 extract_dast_cve.py
          else
            echo "No StackHawk report found!"
          fi

      - name: Create GitHub Issue for StackHawk CVEs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPORT_BODY=$(cat reports/stackhawk_cve_report.md)
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues \
               -d "{\"title\": \"üõ°Ô∏è StackHawk CVE Report (DAST)\", \"body\": \"$REPORT_BODY\"}"
