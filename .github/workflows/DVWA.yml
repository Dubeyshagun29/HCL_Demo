name: "DVWA Security Testing"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # ‚úÖ Allows manual execution from GitHub UI

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  security-tests:
    runs-on: ubuntu-latest
    services:
      dvwa:
        image: vulnerables/web-dvwa  # ‚úÖ Runs DVWA inside GitHub Actions
        ports:
          - 8080:80  # ‚úÖ Exposes DVWA on port 8080
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2  # ‚úÖ Pulls your GitHub repo code

      - name: Wait for DVWA to Start
        run: sleep 30  # ‚úÖ Ensures DVWA is fully running before scanning

      - name: Run SonarCloud Scan (SAST)
        uses: SonarSource/sonarqube-scan-action@v5.0.0  # ‚úÖ Use latest version
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=dubeyshagun29
            -Dsonar.projectKey=Dubeyshagun29_HCL_Demo
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.exclusions=**/obj/**,**/*.dll
            -Dsonar.java.binaries=.
            -Dsonar.security.cwe.include=true
            -Dsonar.security.report.cve=true

      - name: Extract CVE IDs from SonarCloud Report
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to create issues
        run: |
          mkdir -p reports # ‚úÖ Ensure the directory exists
          curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/issues/search?componentKeys=Dub..." -o sonar_issues.json
          echo "Filtering CVE-mapped vulnerabilities..."
          python3 extract_cve.py

      - name: Create GitHub Issue for CVE Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # ‚úÖ Use correct token
        run: |
            REPORT_BODY=$(cat reports/sonarqube_cve_report.md)
            curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues \
              -d "{\"title\": \"üö® SonarCloud CVE Report\", \"body\": \"$REPORT_BODY\"}"


      - name: Run HawkScan (StackHawk DAST)
        uses: stackhawk/hawkscan-action@v2
        continue-on-error: false  # ‚úÖ Stops if the scan fails
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}
          codeScanningAlerts: true

          githubToken: ${{ github.token }}
          configurationFiles: ".hawk/stackhawk.yml"  # ‚úÖ Correct path syntax
      - name: Wait for StackHawk Report
        run: sleep 240  # ‚è≥ Waits for 4 minutes (240 seconds)


      ##- name: Run OWASP ZAP Scan (DAST)
        #uses: zaproxy/action-full-scan@v0.5.0
        #with:
          #target: "http://localhost:8080"  # ‚úÖ Change this to match where DVWA is running
          #docker_name: "mrlucasfreitas/zaproxy-full-scan:3.0"  # ‚úÖ Correct OWASP ZAP image
          #allow_issue_writing: false
          #issue_title: "OWASP ZAP Scan Results"
          


      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: Security-Reports
          path: ./.hawk/reports/
