name: "DVWA Security Testing"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  security-tests:
    runs-on: ubuntu-latest

    services:
      dvwa:
        image: vulnerables/web-dvwa
        ports:
          - 8080:80

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Wait for DVWA to Start
        run: sleep 30

      ########################################
      #            SAST - SONARCLOUD         
      ########################################
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=dubeyshagun29
            -Dsonar.projectKey=Dubeyshagun29_HCL_Demo
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.security.cwe.include=true
            -Dsonar.security.report.cve=true

      - name: Extract CVEs from SonarCloud Report
  env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  run: |
    mkdir -p reports
    curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/issues/search?componentKeys=Dubeyshagun29_HCL_Demo&types=VULNERABILITY" -o sonar_issues.json
    python3 extract_sast_cve.py


          
      - name: Create GitHub Issue for SonarCloud CVEs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BODY=$(cat reports/sonarqube_cve_report.md | jq -Rs .)
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d "{\"title\": \"üö® SonarCloud CVE Report\", \"body\": $BODY}"

      ########################################
      #         DAST - STACKHAWK             #
      ########################################
      - name: Run HawkScan (StackHawk DAST)
        uses: stackhawk/hawkscan-action@v2
        continue-on-error: false
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}
          githubToken: ${{ github.token }}
          configurationFiles: ".hawk/stackhawk.yml"
          codeScanningAlerts: true

      - name: Extract CVEs from StackHawk Report
        run: |
          mkdir -p reports
          if [ -f ".hawk/reports/report.json" ]; then
            cat << 'EOF' > extract_dast_cve.py
import json

with open(".hawk/reports/report.json", "r") as f:
    data = json.load(f)

vulns = []
for vuln in data.get("vulnerabilities", []):
    cves = vuln.get("cves", [])
    if cves:
        vulns.append(f"- {vuln['title']} | Severity: {vuln['severity']} | CVEs: {', '.join(cves)}")

with open("reports/stackhawk_cve_report.md", "w") as f:
    if vulns:
        f.write("## üîç StackHawk CVE Report\\n\\n" + "\\n".join(vulns))
    else:
        f.write("No CVEs found.")
EOF
            python3 extract_dast_cve.py
          else
            echo "No StackHawk report found"
            echo "No CVEs found." > reports/stackhawk_cve_report.md
          fi

      - name: Create GitHub Issue for StackHawk CVEs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BODY=$(cat reports/stackhawk_cve_report.md | jq -Rs .)
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d "{\"title\": \"üîç StackHawk CVE Report\", \"body\": $BODY}"



      - name: Extract CVEs from SAST & DAST
  run: |
    python3 extract_cve_reports.py
