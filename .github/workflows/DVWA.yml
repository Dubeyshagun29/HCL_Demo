name: "DVWA Security Testing"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  security-tests:
    runs-on: ubuntu-latest
    
    services:
      dvwa:
        image: vulnerables/web-dvwa
        ports:
          - 8080:80

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install Python dependencies
        run: pip install requests

      - name: Wait for DVWA to start
        run: sleep 30

      ######################
      # ‚úÖ SAST (SonarCloud)
      ######################
      - name: Run SonarCloud scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0

        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=dubeyshagun29
            -Dsonar.projectKey=Dubeyshagun29_HCL_Demo
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.security.cwe.include=true
            -Dsonar.security.report.cve=true

      - name: Download SonarCloud issues (for CVE extraction)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s -u "${SONAR_TOKEN}:" \
          "https://sonarcloud.io/api/issues/search?componentKeys=Dubeyshagun29_HCL_Demo&types=VULNERABILITY" \
          -o sonar_issues.json

      ########################
      # ‚úÖ DAST (StackHawk)
      ########################
      - name: Run StackHawk scan
        uses: stackhawk/hawkscan-action@v2

        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}
          githubToken: ${{ github.token }}
          configurationFiles: ".hawk/stackhawk.yml"

      - name: Wait for StackHawk report
        run: sleep 30

      ###############################
      # ‚úÖ Run Python to extract CVEs
      ###############################
      - name: Run CVE Extraction Script
        run: python3 extract_cves.py

      #########################################
      # ‚úÖ Create GitHub Issues with CVE Reports
      #########################################
      - name: Create GitHub Issue for SonarCloud CVEs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f reports/sonarqube_cve_report.md ]; then
            body=$(cat reports/sonarqube_cve_report.md)
            gh api repos/${{ github.repository }}/issues \
              -f title="üõë SonarCloud CVE Report" \
              -f body="$body"
          fi

      - name: Create GitHub Issue for StackHawk CVEs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f reports/stackhawk_cve_report.md ]; then
            body=$(cat reports/stackhawk_cve_report.md)
            gh api repos/${{ github.repository }}/issues \
              -f title="üõ°Ô∏è StackHawk CVE Report" \
              -f body="$body"
          fi

      - name: Upload CVE reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: CVE-Reports
          path: reports/
